<!-- ===========================================================================

	Build file for the Oddjob Application
	=====================================

============================================================================ -->

<project xmlns:artifact="antlib:org.apache.maven.artifact.ant"
	xmlns:ivy="antlib:org.apache.ivy.ant"
	default="jar" basedir="." name="Run Oddjob">

	<taskdef uri="antlib:org.apache.maven.artifact.ant"
	            resource="org/apache/maven/artifact/ant/antlib.xml"
		classpath="../oj-assembly/antlibs/maven-ant-tasks-2.1.3.jar"/>
	
	<taskdef resource="org/apache/ivy/ant/antlib.xml"
	                 uri="antlib:org.apache.ivy.ant" 
		classpath="../oj-assembly/antlibs/ivy-2.5.0.jar"/>
	
	<!-- =================================================================== -->
	<!-- Initialization target                                               -->
	<!-- =================================================================== -->
	<target name="init">

		<tstamp/>

		<!-- =================================================================== -->
		<!-- Properties                                                          -->
		<!-- =================================================================== -->

		<property file="../oj-assembly/version.properties"/>
		
		<property name="Name"     value="Run Oddjob"/>
		<property name="name"     value="run-oddjob"/>
		<property name="build.version"  value="${project.version}"/>

		<echo message="--------------------------------------------------------------"/>
		<echo message="            ${Name} ${build.version}                                "/>
		<echo message="--------------------------------------------------------------"/>
		<echo message="Building with ${ant.version}"/>
		<echo message="using build file ${ant.file}"/>
		<echo message="--------------------------------------------------------------"/>

		<property name="debug"          value="on"/>
		<property name="optimize"       value="off"/>
		<property name="deprecation"    value="off"/>
		<property name="nowarn"         value="on"/>
		<!-- <property name="build.compiler" value="classic"/> -->

		<property name="src.dir"          	value="./src"/>
		<property name="main.java"        	value="${src.dir}/main/java"/>
        <property name="main.resources"   	value="${src.dir}/main/resources"/>
		<property name="test.java"        	value="${src.dir}/test/java"/>
        <property name="test.resources"   	value="${src.dir}/test/resources"/>
		<property name="packages"           value="org.oddjob"/>

		<property name="build.dir"        	value="./build"/>
		<property name="build.src"        	value="${build.dir}/src"/>
		<property name="build.classes"    	value="${build.dir}/classes"/>
		<property name="build.tests" 		value="${build.dir}/test-classes"/>
		<property name="build.javadocs"   	value="${build.dir}/javadocs"/>

		<property name="app.dir"        	value="${build.dir}/oddjob"/>


		<property name="test.reports" 		value="${build.dir}/test-reports"/>
		
		<property name="jar.name"       	value="${name}-${build.version}.jar"/>
		<property name="sources.jar.name"   value="${name}-${build.version}-sources.jar"/>
		<property name="javadoc.jar.name"   value="${name}-${build.version}-javadoc.jar"/>

		<filter token="Name"    value="${Name}"/>
		<filter token="name"    value="${name}"/>
		<filter token="version" value="${build.version}"/>
		<filter token="date"    value="${TODAY}"/>
		<filter token="log"     value="true"/>
		<filter token="verbose" value="true"/>

	</target>

	<!-- =================================================================== -->
	<!-- Prepare for the build                                               -->
	<!-- =================================================================== -->
	<target name="prepare" depends="init">

		<mkdir dir="${build.dir}"/>
		<mkdir dir="${app.dir}"/>

		<ivy:cachepath pathid="classpath" conf="default" />
		
		<ivy:cachepath pathid="test-cachepath" conf="test" />
			
		<path id="test-classpath">
			<pathelement path="${build.classes}" />
			<path refid="test-cachepath"/>
		</path>
	
	</target>

	<!-- =================================================================== -->
	<!-- Prepares the source code                                            -->
	<!-- =================================================================== -->

	<target name="prepare-src-main" depends="prepare">

		<mkdir dir="${build.src}"/>
		<mkdir dir="${build.classes}"/>

		<copy todir="${build.src}" filtering="on">
			<fileset dir="${main.java}"/>
		</copy>

	</target>

	<target name="jar-sources" depends="prepare-src-main">
	    <jar destfile="${build.dir}/${sources.jar.name}"
	         basedir="${build.src}">
	    </jar>
	</target>

	<!-- =================================================================== -->
	<!-- Compiles the source directory                                       -->
	<!-- =================================================================== -->
	
	<target name="compile" depends="prepare-src-main"
          description="Compiles the source code">

		<!--copy todir="${build.classes}">
            <fileset dir="${main.resources}"/>
		</copy -->

		<echo message="Compiling with Java ${ant.java.version}, debug ${debug}, optimize ${optimize}, deprecation ${deprecation}"/>

		<javac srcdir="${build.src}"
           destdir="${build.classes}"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}"
           nowarn="${nowarn}">
			<classpath refid="classpath"/>
		</javac>
	</target>

	<!-- =================================================================== -->
	<!-- Creates the jar file                                                -->
	<!-- =================================================================== -->

	<target name="jar" depends="compile" 
		description="Generates the jar packages">

	    <jar destfile="${build.dir}/${jar.name}"
	         basedir="${build.classes}">
			<manifest>
				<attribute name="Main-Class"
						   value="org.oddjob.launch.Launcher"/>
			</manifest>
			<metainf dir=".">
				<include name="LICENSE.txt"/>
				<include name="NOTICE.txt"/>
			</metainf>
		</jar>

		<copy tofile="${app.dir}/run-oddjob.jar" file="${build.dir}/${jar.name}"/>

		<ivy:retrieve pattern="${app.dir}/lib/[artifact]-[revision].[ext]" conf="app"/>

		<copy toDir="${app.dir}/opt">
			<fileset dir="${src.dir}/main/opt">
			</fileset>
		</copy>

		<copy toDir="${app.dir}/bin">
			<fileset dir="${src.dir}/main/bin"/>
		</copy>

		<copy todir="${app.dir}">
			<fileset dir="../oddjob">
				<include name="oddjob.xml"/>
				<include name="explorer.xml"/>
				<include name="server.xml"/>
				<include name="server-jobs.xml"/>
				<include name="client.xml"/>
			</fileset>
		</copy>

		<copy todir="${app.dir}">
			<fileset dir=".">
				<include name="README.md"/>
				<include name="LICENSE.txt"/>
				<include name="NOTICE.txt"/>
				<include name="RELEASE-NOTES.txt"/>
			</fileset>
		</copy>

	</target>

	<!-- =================================================================== -->
	<!-- Set a variable if javadoc is already up-to-date.                    -->
	<!-- =================================================================== -->
	<target name="javadocs_check">
		<mkdir dir="${build.javadocs}"/>
		<uptodate property="javadocs.notrequired" targetfile="${build.javadocs}/index.html" >
			<srcfiles dir= "${build.src}" includes="**/*.java,**/package.html"/>
		</uptodate>
	</target>

	<!-- =================================================================== -->
	<!-- If javadoc is already up-to-date, print a message saying so.        -->
	<!-- =================================================================== -->
	<target name="javadocs_done" if="javadocs.notrequired">
		<echo message="-------------------------------------------------------------"/>
		<echo message="Not rebuilding Javadocs, as they are up-to-date:"/>
		<echo message="  ${build.javadocs}/index.html is more recent than"/>
		<echo message="  ${build.src}/**/*.java"/>
		<echo message="-------------------------------------------------------------"/>
	</target>

	<!-- =================================================================== -->
	<!-- Creates the API documentation                                       -->
	<!-- =================================================================== -->
	<target name="javadocs" depends="prepare-src-main, javadocs_check, javadocs_done"
         unless="javadocs.notrequired"
         description="Builds the API documentation (javadocs)">
		<javadoc packagenames="${packages}.*"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="false"
             noindex="true"
             windowtitle="${Name} API"
             doctitle="${Name}">
			<classpath refid="classpath"/>
			<tag name="oddjob.element" description="Oddjob Element: "/>
			<tag name="oddjob.property" description="Oddjob Property: "/>
			<tag name="oddjob.description" description="Description: "/>
			<tag name="oddjob.example" description="Example: "/>
			<tag name="oddjob.required" description="Required: "/>
			<tag name="see"/>
			<tag name="author"/>
			<tag name="version"/>
			<tag name="since"/>
			<tag name="param"/>
			<tag name="return"/>
			<tag name="throws"/>
		</javadoc>
	</target>
	
	<target name="jar-javadoc" depends="javadocs">
	    <jar destfile="${build.dir}/${javadoc.jar.name}"
	         basedir="${build.javadocs}">
	    </jar>
	</target>

	<!-- =================================================================== -->
	<!-- Test targets                                                       -->
	<!-- =================================================================== -->
	
	<target name="compile-tests" depends="compile" description="Compile jUnit tests">

		<mkdir dir="${build.tests}"/>

		<!-- Compile tests -->
		<javac srcdir="${test.java}"
            destdir="${build.tests}"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="${deprecation}">
			<classpath refid="test-classpath"/>
		</javac>

	</target>

	<target name="all-tests" depends="compile-tests" description="Perform jUnit tests">
		<mkdir dir="${test.reports}"/>
		
		<junit printsummary="yes" haltonfailure="no" 
				failureproperty="junit.failure" fork="yes" forkmode="once">
			<classpath>
				<pathelement location="${build.tests}" />
			</classpath>
			<classpath refid="test-classpath"/>
			<batchtest todir="${test.reports}">
				<fileset dir="${build.tests}">
					<include name="**/test/*TestCase.class"/>
					<include name="**/*Test.class" />
					<exclude name="**/AllTest.class" />
					<exclude name="**/*$$*Test.class" />
				</fileset>
			</batchtest>
			<formatter type="xml"/>
			<sysproperty key="basedir" value="${basedir}"/>
			<sysproperty key="oddjob.home" value="${oddjob.home}"/>
			<sysproperty key="ant.file" value="${ant.file}"/>
		</junit>
		
		<junitreport todir="${test.reports}">
			<fileset dir="${test.reports}">
		    	<include name="TEST-*.xml"/>
			</fileset>
		    <report todir="${test.reports}"/>
		</junitreport>
		
		<fail if="junit.failure" message="Unit test(s) failed. See reports in ${test.reports}."/>	

	</target>

	<target name="single-test" depends="jar" description="Single JUnit test">
		<junit printsummary="yes" haltonfailure="yes" fork="yes">
			<classpath>
				<pathelement location="${build.tests}" />
			</classpath>
			<classpath refid="test-classpath"/>
			<formatter type="plain" usefile="no" />
			<test name="${junit.test}"/>
			<sysproperty key="basedir" value="${basedir}"/>
			<sysproperty key="oddjob.home" value="${oddjob.home}"/>
			<sysproperty key="ant.file" value="${ant.file}"/>
		</junit>
	</target>
	
	<!-- =================================================================== -->
	<!-- Install in the source distribution                                    -->
	<!-- =================================================================== -->
	<target name="install" depends="jar">
		
		<ivy:publish resolver="local" pubrevision="${build.version}" overwrite="true">
		   <artifacts pattern="${build.dir}/[artifact]-[revision].[ext]" />
		</ivy:publish>
		
	</target>
	
	<!-- =================================================================== -->
	<!-- Prepares the source distribution                                    -->
	<!-- =================================================================== -->
	<target name="dist-src" depends="init" if="dist.src.dir"
          description="Prepares the source distribution">
		
		<property name="to.dir" value="${dist.src.dir}/${name}"/>
			
		<copy todir="${to.dir}/src" filtering="off">
			<fileset dir="${src.dir}"/>
		</copy>

		<copy todir="${to.dir}">
			<fileset dir=".">
				<include name="build.xml"/>
                <include name="ivy.xml"/>
			    <include name="ivysettings.xml"/>
                <include name="pom.xml"/>
			</fileset>
		</copy>

	</target>

	<!-- =================================================================== -->
	<!-- Prepares the binary distribution                                    -->
	<!-- =================================================================== -->
	<target name="dist-bin" depends="jar"
			if="dist.bin.dir">

		<property name="to.dir" value="${dist.bin.dir}"/>

		<mkdir dir="${to.dir}"/>
		<mkdir dir="${to.dir}/bin"/>
		<mkdir dir="${to.dir}/docs"/>
		<mkdir dir="${to.dir}/docs/api"/>
		<mkdir dir="${to.dir}/oddballs"/>

		<copy todir="${to.dir}">
			<fileset dir="${app.dir}"/>
		</copy>

	</target>
	
	<!-- =================================================================== -->
	<!-- Maven Targets			                                     -->
	<!-- =================================================================== -->
	
	<target name="maven-init" depends="init, jar, jar-sources, jar-javadoc">
		
		<property name="maven.groupId"		value="uk.co.gordon" />
		<property name="maven.artifactId" 	value="${name}" />
		<property name="maven.version" 		value="${version}" />

	    <!-- define artifacts' name, which follows the convention of Maven -->
		<property name="maven.jar" 			value="${basedir}/build/${jar.name}" />
		<property name="maven.javadoc.jar" 	value="${basedir}/build/${javadoc.jar.name}" />
		<property name="maven.sources.jar" 	value="${basedir}/build/${sources.jar.name}" />
		<property name="maven.pom" 			value="${basedir}/build/pom.xml" />

	    <!-- defined maven snapshots and staging repository id and url -->
		<property name="maven.snapshots.repository.id" 	value="sonatype-nexus-snapshots" />
		<property name="maven.snapshots.repository.url" value="https://oss.sonatype.org/content/repositories/snapshots/" />
		<property name="maven.staging.repository.id" 	value="sonatype-nexus-staging" />
		<property name="maven.staging.repository.url" 	value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />

		<property name="maven.deploy.plugin" 	value="org.apache.maven.plugins:maven-deploy-plugin:2.6" />
		<property name="maven.gpg.plugin" 		value="org.apache.maven.plugins:maven-gpg-plugin:1.3" />
		
		<copy file="${src.dir}/pom.xml" todir="${build.dir}" filtering="on"/>
	</target>
	
	<target name="maven-install" depends="maven-init" 
			description="Install in local repository">
		<artifact:install file="${maven.jar}">
	    	<pom file="${maven.pom}"/>
			<attach file="${maven.sources.jar}" type="jar" classifier="sources"/>
			<attach file="${maven.javadoc.jar}" type="jar" classifier="javadoc"/>	  
		</artifact:install>
	</target>
	
    <target name="maven-deploy" depends="maven-init" 
    	description="Deploy snapshot version to Maven snapshot repository">
		<artifact:mvn>
			<arg value="${maven.deploy.plugin}:deploy-file" />
			<arg value="-Durl=${maven.snapshots.repository.url}" />
			<arg value="-DrepositoryId=${maven.snapshots.repository.id}" />
			<arg value="-DpomFile=${maven.pom}" />
			<arg value="-Dfile=${maven.jar}" />
			<arg value="-Dsources=${maven.sources.jar}" />
			<arg value="-Djavadoc=${maven.javadoc.jar}" />
		</artifact:mvn>
    </target>
	
	<target name="maven-stage" depends="maven-init" 
		description="Deploy release version to Maven staging repository">
		<!-- sign and deploy the main artifact -->
		<artifact:mvn>
			<arg value="${maven.gpg.plugin}:sign-and-deploy-file" />
			<arg value="-Durl=${maven.staging.repository.url}" />
			<arg value="-DrepositoryId=${maven.staging.repository.id}" />
			<arg value="-DpomFile=${maven.pom}" />
			<arg value="-Dfile=${maven.jar}" />
	        <arg value="-Pgpg" />
		</artifact:mvn>

		<!-- sign and deploy the sources artifact -->
		<artifact:mvn>
			<arg value="${maven.gpg.plugin}:sign-and-deploy-file" />
			<arg value="-Durl=${maven.staging.repository.url}" />
			<arg value="-DrepositoryId=${maven.staging.repository.id}" />
			<arg value="-DpomFile=${maven.pom}" />
			<arg value="-Dfile=${maven.sources.jar}" />
			<arg value="-Dclassifier=sources" />
			<arg value="-Pgpg" />
		</artifact:mvn>
	
		<!-- sign and deploy the javadoc artifact -->
		<artifact:mvn>
			<arg value="${maven.gpg.plugin}:sign-and-deploy-file" />
			<arg value="-Durl=${maven.staging.repository.url}" />
			<arg value="-DrepositoryId=${maven.staging.repository.id}" />
			<arg value="-DpomFile=${maven.pom}" />
			<arg value="-Dfile=${maven.javadoc.jar}" />
			<arg value="-Dclassifier=javadoc" />
	        <arg value="-Pgpg" />
		</artifact:mvn>
	</target>
	
	<!-- =================================================================== -->
	<!-- Clean targets                                                       -->
	<!-- =================================================================== -->
	<target name="clean" depends="init" description="Cleans the build directories">
		<delete dir="${build.dir}"/>
	</target>

</project>

<!-- End of file -->
